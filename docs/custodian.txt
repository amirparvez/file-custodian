-   FCCustodian: A custodian manages different depositories. Each depository is handled by an FCFileHandler.
#   Config: { name }

#   resetDefaultFH (private) : Resets default file handler.
    input: file handler-name
    returns true or error

#   activateFH (private) : Activating a file handler is no more supported therefore it returns a specific file handler.
    input: file handler-name
    returns file handler or error

#   dep : Returns a specific file handler.
    input: file handler-name
    returns file handler

#   newDepository : Creates new depository/file handler.
    input: { type, base_path, isDefault }
    returns true or false

#   getFileSchemaNameFromFH (private) : Returns file schema name based on depository/file handler type. Not used anymore.
    input: file handler
    returns file schema name

#   newFile : Calls newFile function of default file handler.
    input: { (name, ext, contents)/request, folder, isEncrypted }
    returns file or null

#   getFile : Calls getFile function of default file handler.
    input: { (name, ext, folder)/path }
    returns file or null

#   renameFile : Calls renameFile function of default file handler.
    input: { (name, ext, folder)/path, (new_path)/new_name, }
    returns true or false

#   deleteFile : Calls deleteFile function of default file handler.
    input: { (name, ext, folder)/path }
    returns true or false

#   searchFiles : Calls searchFiles function of default file handler.
    input: { folder, query }
    returns files or []

#   getFileSize : Calls getFileSize function of default file handler.
    input: file-path
    returns size or 0

#   syncDB : Calls syncDB function of default file handler.
    returns files or []

#   replaceFileContents (private) : Calls replaceFileContents function of default file handler.
    input: { file, new_contents }
    returns true or false
