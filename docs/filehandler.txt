-   FCFileHandler: Each depository is handled by an FCFileHandler. Each file-handler can have one database-handler & one file-protector (FCFileProtector).
#   Config: { type, base_path, user_id }

#   db : Returns the database handler.
    returns database-handler

#   setUser : Sets user id.
    input : user_id
    returns true

#   newDatabase : Creates new database/database handler.
    input : { table_name, proper_delete, (host, port, database, username, password)/sequelize_instance, user_model }
    returns true or false

#   newProtector : Creates new file protector.
    input : { algorithm }
    returns true or false

#   makeLocalDir (private) : Creates new local directory.
    input : path
    returns true or false

#   makeLocalFile (private) : Creates new local file.
    input : path, contents
    returns true or false

#   getLocalFileSize (private) : Returns size of local file.
    input : path
    returns size or 0

#   doesLocalPathExists (private) : Checks if local path exists.
    input : path
    returns true or false

#   isLocalPathOfFile (private) : Checks if local path if of a file.
    input : path
    returns true or false

#   isLocalPathOfDirectory (private) : Checks if local path if of a directory.
    input : path
    returns true or false

#   searchLocalFiles (private) : Searches files in a local directory.
    input : path, query
    returns files or []

#   getLocalFile (private) : Returns values of a local file.
    input : path
    returns { name, ext, folder, } or null

#   getLocalFileContents (private) : Gets contents of a local file.
    input : path
    returns { contents: contents/null, contentType, readStream }

#   deleteLocalFile (private) : Deletes a local file.
    input : path
    returns true or false

#   renameLocalFile (private) : Renames a local file.
    input : path, new_path
    returns true or false

#   newFCFile (private) : Returns a new FCFile instance
    input : { name, ext, folder, contents, isEncrypted, user_id, handler }
    returns FCFile or null

#   getFilesFromHttpRequest (private) : Returns files from a multipart http request using multiparty.
    input : request
    returns files or []

#   getAllFilesOfLocalDirectory (private) : Gets paths of all files in a local directory.
    input : path
    returns files or []

#   newFile : Creates new file/s in depository.
    input : { (name, ext, contents, isStream)/request, folder, isEncrypted, }
    returns file/s or null

#   deleteFile : Deletes a file from depository.
    input : { (name, ext, folder)/path }
    returns true or false

#   renameFile : Renames a file in depository.
    input : { (name, ext, folder)/path, (new_path)/new_name, }
    returns true or false

#   getFile : Gets a file from depository.
    input: { (name, ext, folder)/path }
    returns file or null

#   searchFiles : Searches file in depository.
    input: { folder, query }
    returns files or []

#   getFileSize : Gets size of file in depository.
    input: file-path
    returns size or 0

#   syncDB : Syncs all files in the depository to the connected database.
    returns files or []

#   replaceFileContents (private) : Replaces file contents in depository.
    input: { file, new_contents }
    returns true or false

#   getContentType (private) : Returns content type from a string for http request/response
    input: fpath
    returns content type

#   getFileContents (private) Returns contents of a file in depository.
    input: file instanceof FCFile
    returns { contents: contents/null, contentType, readStream }
